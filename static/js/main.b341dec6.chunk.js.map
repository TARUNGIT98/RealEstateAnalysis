{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["HomePriceEstimator","sqft","setSqft","useState","bhk","setBhk","bathrooms","setBathrooms","location","setLocation","locations","setLocations","estimatedPrice","setEstimatedPrice","API_BASE_URL","useEffect","fetch","then","response","json","data","catch","error","console","React","createElement","className","type","value","onChange","e","target","map","Fragment","key","id","name","checked","htmlFor","disabled","loc","onClick","async","alert","method","headers","body","JSON","stringify","total_sqft","parseFloat","bath","estimated_price","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"gOAsHeA,MAnHYA,KACzB,MAAOC,EAAMC,GAAWC,mBAAS,MAC1BC,EAAKC,GAAUF,mBAAS,IACxBG,EAAWC,GAAgBJ,mBAAS,IACpCK,EAAUC,GAAeN,mBAAS,KAClCO,EAAWC,GAAgBR,mBAAS,KACpCS,EAAgBC,GAAqBV,mBAAS,MAE/CW,EAAe,8CAErBC,oBAAU,KACRC,MAASF,EAAH,uBACHG,KAAKC,GAAYA,EAASC,QAC1BF,KAAKG,IACAA,EAAKV,WACPC,EAAaS,EAAKV,aAGrBW,MAAMC,GAASC,QAAQD,MAAM,4BAA6BA,KAC5D,IAuBH,OACEE,IAAAC,cAAA,OAAKC,UAAU,aACbF,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,UAAI,sBACJD,IAAAC,cAAA,SACEC,UAAU,aACVC,KAAK,SACLC,MAAO3B,EACP4B,SAAWC,GAAM5B,EAAQ4B,EAAEC,OAAOH,SAGpCJ,IAAAC,cAAA,UAAI,OACJD,IAAAC,cAAA,OAAKC,UAAU,gBACZ,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGM,IAAIJ,GACnBJ,IAAAC,cAACD,IAAMS,SAAQ,CAACC,IAAKN,GACnBJ,IAAAC,cAAA,SACEE,KAAK,QACLQ,GAAI,OAAOP,EACXQ,KAAK,MACLR,MAAOA,EACPS,QAASjC,IAAQwB,EACjBC,SAAUA,IAAMxB,EAAOuB,KAEzBJ,IAAAC,cAAA,SAAOa,QAAS,OAAOV,GAAUA,MAKvCJ,IAAAC,cAAA,UAAI,QACJD,IAAAC,cAAA,OAAKC,UAAU,gBACZ,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGM,IAAIJ,GACnBJ,IAAAC,cAACD,IAAMS,SAAQ,CAACC,IAAKN,GACnBJ,IAAAC,cAAA,SACEE,KAAK,QACLQ,GAAI,QAAQP,EACZQ,KAAK,OACLR,MAAOA,EACPS,QAAS/B,IAAcsB,EACvBC,SAAUA,IAAMtB,EAAaqB,KAE/BJ,IAAAC,cAAA,SAAOa,QAAS,QAAQV,GAAUA,MAKxCJ,IAAAC,cAAA,UAAI,YACJD,IAAAC,cAAA,UACEC,UAAU,eACVE,MAAOpB,EACPqB,SAAWC,GAAMrB,EAAYqB,EAAEC,OAAOH,QAEtCJ,IAAAC,cAAA,UAAQG,MAAM,GAAGW,UAAQ,GAAC,qBACzB7B,EAAUsB,IAAIQ,GACbhB,IAAAC,cAAA,UAAQS,IAAKM,EAAKZ,MAAOY,GAAMA,KAInChB,IAAAC,cAAA,UAAQE,KAAK,SAASD,UAAU,gBAAgBe,QA9EhCC,UACpB,IAAKlC,EAEH,YADAmC,MAAM,6BAIR,MAAMzB,QAAiBF,MAASF,EAAH,sBAAsC,CACjE8B,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBC,WAAYC,WAAWjD,GACvBG,MACA+C,KAAM7C,EACNE,eAIEY,QAAaF,EAASC,OAC5BN,EAAkBO,EAAKgC,mBA4DqD,kBAMvExC,GACCY,IAAAC,cAAA,OAAKC,UAAU,UACbF,IAAAC,cAAA,UAAI,0BAAmBb,EAAe,aClGnCyC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,KAAKuC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCDDQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH1C,IAAAC,cAACD,IAAM2C,WAAU,KACf3C,IAAAC,cAAC2C,EAAG,QAORf,K","file":"static/js/main.b341dec6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst HomePriceEstimator = () => {\n  const [sqft, setSqft] = useState(1000);\n  const [bhk, setBhk] = useState(2);\n  const [bathrooms, setBathrooms] = useState(2);\n  const [location, setLocation] = useState('');\n  const [locations, setLocations] = useState([]);\n  const [estimatedPrice, setEstimatedPrice] = useState(null);\n\n  const API_BASE_URL = \"https://realestateanalysis.onrender.com/api\"; // Backend Render URL\n\n  useEffect(() => {\n    fetch(`${API_BASE_URL}/get_location_names`)\n      .then(response => response.json())\n      .then(data => {\n        if (data.locations) {\n          setLocations(data.locations);\n        }\n      })\n      .catch(error => console.error('Error fetching locations:', error));\n  }, []);\n\n  const estimatePrice = async () => {\n    if (!location) {\n      alert('Please select a location.');\n      return;\n    }\n\n    const response = await fetch(`${API_BASE_URL}/predict_home_price`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        total_sqft: parseFloat(sqft),\n        bhk,\n        bath: bathrooms,\n        location\n      })\n    });\n\n    const data = await response.json();\n    setEstimatedPrice(data.estimated_price);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"form\">\n        <h2>Area (Square Feet)</h2>\n        <input\n          className=\"area-input\"\n          type=\"number\"\n          value={sqft}\n          onChange={(e) => setSqft(e.target.value)}\n        />\n\n        <h2>BHK</h2>\n        <div className=\"switch-field\">\n          {[1, 2, 3, 4, 5].map(value => (\n            <React.Fragment key={value}>\n              <input\n                type=\"radio\"\n                id={`bhk-${value}`}\n                name=\"bhk\"\n                value={value}\n                checked={bhk === value}\n                onChange={() => setBhk(value)}\n              />\n              <label htmlFor={`bhk-${value}`}>{value}</label>\n            </React.Fragment>\n          ))}\n        </div>\n\n        <h2>Bath</h2>\n        <div className=\"switch-field\">\n          {[1, 2, 3, 4, 5].map(value => (\n            <React.Fragment key={value}>\n              <input\n                type=\"radio\"\n                id={`bath-${value}`}\n                name=\"bath\"\n                value={value}\n                checked={bathrooms === value}\n                onChange={() => setBathrooms(value)}\n              />\n              <label htmlFor={`bath-${value}`}>{value}</label>\n            </React.Fragment>\n          ))}\n        </div>\n\n        <h2>Location</h2>\n        <select\n          className=\"select-field\"\n          value={location}\n          onChange={(e) => setLocation(e.target.value)}\n        >\n          <option value=\"\" disabled>Choose a Location</option>\n          {locations.map(loc => (\n            <option key={loc} value={loc}>{loc}</option>\n          ))}\n        </select>\n\n        <button type=\"button\" className=\"submit-button\" onClick={estimatePrice}>\n              Estimate Price\n        </button>\n\n\n\n        {estimatedPrice && (\n          <div className=\"result\">\n            <h2>Estimated Price: â‚¹{estimatedPrice} Lakh</h2>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HomePriceEstimator;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}